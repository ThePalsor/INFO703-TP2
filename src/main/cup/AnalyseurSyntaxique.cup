/* package et imports */
package fr.usmb.m1isc.compilation.tp;
import java_cup.runtime.Symbol;
import java.util.HashMap;

/* inclusion du code */

action code {: 
    // pour utilisation dans les actions (classe action)
	// HashMap pour la gestion des variables
	private HashMap<String,Integer> vars = new HashMap<>();
	// gestion des erreurs d'evaluation
	private boolean erreur = false;

	private Tree tree;
:};

 
parser code {:
    // pour le parser (redefinition de la methode reportant les erreurs d'analyse)
  public void report_error(String message, Object info) {
 	String m = "";
 	if (info instanceof java_cup.runtime.Symbol) {
 	    Symbol s = ((Symbol) info); 	
 		if (s != null && s.left >= 0 ) {
 			/* Ajoute le numero de ligne  et de colonne*/
 			m =  "Ligne " + (s.left+1) + ", Colonne " + (s.right+1) + " : ";
 			}
 		}
 	m = m + message;
    System.err.println(m);
    }
:};

 init with {:
    //	initialisation du parser
:};

/* symboles terminaux */
terminal PLUS, MOINS, MOINS_UNAIRE, MUL, DIV, MOD, NOT, OR, AND, PAR_G, PAR_D, SEMI, POINT, LET, INPUT, OUTPUT, IF, THEN, ELSE, WHILE, DO, EGAL, LT, LTE, GT, GTE, NIL, ERROR; 
terminal Integer ENTIER;
terminal Boolean BOOL;
terminal String IDENT;

/* non terminaux */
//non terminal program, sequence, expression, expr;

non terminal Tree expression, sequence, expr, program;

precedence nonassoc OUTPUT;
precedence right OR;
precedence right AND;
precedence right NOT;
precedence nonassoc EGAL;
precedence nonassoc GT, GTE, LT, LTE;
precedence left PLUS, MOINS;
precedence left MUL, DIV, MOD;
precedence left MOINS_UNAIRE;


/* grammaire */
// un pg est une sequence d'insctions terminee par point
program ::= 
	sequence:s POINT  {: tree = s;
						System.out.println(s);:}
	;

// une sequence est une suite d'instructions separes par des point virgules	
sequence ::= expression:e1 SEMI sequence:e2 {: RESULT = new Tree(NodeType.SEMI, null, e1, e2); :}
	 	   | expression:e {: RESULT = e; :}
	 	   |
	 	   ;

// une expession est soit une affectation ,une 			 
expression ::= expr:e {: RESULT = e; :}
             | LET IDENT:nom EGAL expr:e  	{: RESULT = new Tree(NodeType.LET, null, new Tree(NodeType.IDENT, nom, null, null), e);
												vars.put(nom, (Integer) e.getValue()); :}			
             | WHILE expr:cond DO expression:e {: RESULT = new Tree(NodeType.WHILE, null, cond, e); :}
             | IF expr:cond THEN expression:a1 ELSE expression:a2 {: System.out.println("if");
																	RESULT = new Tree(NodeType.IF, null, cond, a1, a2); :}
             | error // reprise d'erreurs
			 ;

// 
expr ::= NOT:op expr:e {: RESULT = new Tree(NodeType.NOT, !((Boolean) e.getValue()).booleanValue(), e); :}
	   | expr:e1 AND expr:e2 {: RESULT = new Tree(NodeType.AND, ((Boolean) e1.getValue()).booleanValue() && ((Boolean) e2.getValue()).booleanValue(), e1, e2); :}
	   | expr:e1 OR expr:e2 {: RESULT = new Tree(NodeType.OR, ((Boolean) e1.getValue()).booleanValue() || ((Boolean) e2.getValue()).booleanValue(), e1, e2); :}
	   | expr:e1 EGAL expr:e2 {: RESULT = new Tree(NodeType.EGAL, ((Integer) e1.getValue()).intValue() == ((Integer) e2.getValue()).intValue(), e1, e2); :}
	   | expr:e1 GT expr:e2 {: RESULT = new Tree(NodeType.GT, ((Integer) e1.getValue()).intValue() > ((Integer) e2.getValue()).intValue(), e1, e2); :}
	   | expr:e1 GTE expr:e2 {: RESULT = new Tree(NodeType.GTE, ((Integer) e1.getValue()).intValue() >= ((Integer) e2.getValue()).intValue(), e1, e2); :}
	   | expr:e1 LT expr:e2 {: RESULT = new Tree(NodeType.LT, ((Integer) e1.getValue()).intValue() < ((Integer) e2.getValue()).intValue(), e1, e2); :}
	   | expr:e1 LTE expr:e2 {: RESULT = new Tree(NodeType.LTE, ((Integer) e1.getValue()).intValue() <= ((Integer) e2.getValue()).intValue(), e1, e2); :}
	   | expr:e1 PLUS expr:e2 {: RESULT = new Tree(NodeType.PLUS, ((Integer) e1.getValue()).intValue() + ((Integer) e2.getValue()).intValue(), e1, e2); :}
	   | expr:e1 MOINS expr:e2 {: RESULT = new Tree(NodeType.MOINS, ((Integer) e1.getValue()).intValue() - ((Integer) e2.getValue()).intValue(), e1, e2); :}
	   | expr:e1 MUL expr:e2 {: RESULT = new Tree(NodeType.MUL, ((Integer) e1.getValue()).intValue() * ((Integer) e2.getValue()).intValue(), e1, e2); :}
	   | expr:e1 DIV expr:e2 {: RESULT = new Tree(NodeType.DIV, ((Integer) e1.getValue()).intValue() / ((Integer) e2.getValue()).intValue(), e1, e2); :}
	   | expr:e1 MOD expr:e2 {: RESULT = new Tree(NodeType.MOD, ((Integer) e1.getValue()).intValue() % ((Integer) e2.getValue()).intValue(), e1, e2); :}
	   | MOINS expr:e  %prec MOINS_UNAIRE {: RESULT = new Tree(NodeType.MOINS_UN, -((Integer) e1.getValue()).intValue(), null, null); :}
	   | OUTPUT expr:e {: RESULT = new Tree(NodeType.OUTPUT, null, e); :}
	   | INPUT {: RESULT = new Tree(NodeType.INPUT, 0); :}
	   | NIL
	   | BOOL:b {: RESULT = new Tree(NodeType.BOOL, b, null, null); :}
	   | ENTIER:n {: RESULT = new Tree(NodeType.ENTIER, n, null, null); :}
	   | IDENT:id {: Integer value = ( Integer ) vars.get( id );

						RESULT = new Tree(NodeType.IDENT, value, null, null); :}
	   | PAR_G sequence:e PAR_D {: RESULT = e; :}
	   ;

